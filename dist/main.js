(()=>{"use strict";var n={443:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(15),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody {\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n  overflow-y: hidden;\r\n}\r\n\r\n/* Form section */\r\n.form-section {\r\n  height: 100vh;\r\n  width: 60%;\r\n  margin: 0 auto;\r\n}\r\n\r\n/* Form */\r\n.form-control {\r\n  margin: 2rem auto 0;\r\n  width: 80%;\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fff;\r\n  border-radius: 5px;\r\n  box-shadow: 2px 2px 5px rgba(150, 145, 145, 0.342);\r\n}\r\n\r\n.header-wrap {\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n.heading {\r\n  padding: 1rem 0.5rem;\r\n  padding: 1rem;\r\n}\r\n\r\n/* Form input */\r\n.form-input {\r\n  padding: 1rem;\r\n  display: flex;\r\n  column-gap: 1rem;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.add {\r\n  border: none;\r\n  background-color: inherit;\r\n  outline: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.syc {\r\n  padding: 1rem;\r\n}\r\n\r\n.syc:hover {\r\n  color: orange;\r\n  cursor: pointer;\r\n}\r\n\r\n.add:hover {\r\n  color: orange;\r\n}\r\n\r\n/* checkbox */\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.list {\r\n  padding: 1rem;\r\n  display: flex;\r\n  column-gap: 1rem;\r\n  align-items: center;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.dot {\r\n  cursor: move;\r\n}\r\n\r\n.check {\r\n  width: 20px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n  background-color: orange;\r\n}\r\n\r\n.label {\r\n  width: 100%;\r\n}\r\n\r\n.italics {\r\n  border: none;\r\n  background-color: inherit;\r\n}\r\n\r\n.italics:focus {\r\n  outline: none;\r\n  border: none;\r\n  background-color: inherit;\r\n}\r\n\r\n.italics:placeholder-shown {\r\n  font-style: italic;\r\n  font-size: 20px;\r\n}\r\n\r\n.strike {\r\n  text-decoration: line-through;\r\n}\r\n\r\n/* clear */\r\n.clear {\r\n  padding: 1rem;\r\n  align-items: center;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.clear a {\r\n  color: #666;\r\n  text-decoration: none;\r\n}\r\n\r\n.clear a:hover {\r\n  text-decoration: underline;\r\n}\r\n","",{version:3,sources:["webpack://./src/assets/stylesheet/style.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,gDAAgD;EAChD,kBAAkB;AACpB;;AAEA,iBAAiB;AACjB;EACE,aAAa;EACb,UAAU;EACV,cAAc;AAChB;;AAEA,SAAS;AACT;EACE,mBAAmB;EACnB,UAAU;EACV,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,sBAAsB;EACtB,kBAAkB;EAClB,kDAAkD;AACpD;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,8BAA8B;EAC9B,WAAW;AACb;;AAEA;EACE,oBAAoB;EACpB,aAAa;AACf;;AAEA,eAAe;AACf;EACE,aAAa;EACb,aAAa;EACb,gBAAgB;EAChB,mBAAmB;EACnB,8BAA8B;EAC9B,6BAA6B;EAC7B,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,yBAAyB;EACzB,aAAa;EACb,eAAe;EACf,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;AACf;;AAEA,aAAa;AACb;EACE,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,gBAAgB;EAChB,mBAAmB;EACnB,6BAA6B;EAC7B,sBAAsB;AACxB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;EACf,wBAAwB;AAC1B;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,yBAAyB;AAC3B;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,6BAA6B;AAC/B;;AAEA,UAAU;AACV;EACE,aAAa;EACb,mBAAmB;EACnB,kBAAkB;EAClB,qBAAqB;EACrB,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B",sourcesContent:["* {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\nbody {\r\n  font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n  overflow-y: hidden;\r\n}\r\n\r\n/* Form section */\r\n.form-section {\r\n  height: 100vh;\r\n  width: 60%;\r\n  margin: 0 auto;\r\n}\r\n\r\n/* Form */\r\n.form-control {\r\n  margin: 2rem auto 0;\r\n  width: 80%;\r\n  height: auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #fff;\r\n  border-radius: 5px;\r\n  box-shadow: 2px 2px 5px rgba(150, 145, 145, 0.342);\r\n}\r\n\r\n.header-wrap {\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n}\r\n\r\n.heading {\r\n  padding: 1rem 0.5rem;\r\n  padding: 1rem;\r\n}\r\n\r\n/* Form input */\r\n.form-input {\r\n  padding: 1rem;\r\n  display: flex;\r\n  column-gap: 1rem;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.add {\r\n  border: none;\r\n  background-color: inherit;\r\n  outline: none;\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n}\r\n\r\n.syc {\r\n  padding: 1rem;\r\n}\r\n\r\n.syc:hover {\r\n  color: orange;\r\n  cursor: pointer;\r\n}\r\n\r\n.add:hover {\r\n  color: orange;\r\n}\r\n\r\n/* checkbox */\r\n.container {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.list {\r\n  padding: 1rem;\r\n  display: flex;\r\n  column-gap: 1rem;\r\n  align-items: center;\r\n  border-bottom: 1px solid #ddd;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.dot {\r\n  cursor: move;\r\n}\r\n\r\n.check {\r\n  width: 20px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n  background-color: orange;\r\n}\r\n\r\n.label {\r\n  width: 100%;\r\n}\r\n\r\n.italics {\r\n  border: none;\r\n  background-color: inherit;\r\n}\r\n\r\n.italics:focus {\r\n  outline: none;\r\n  border: none;\r\n  background-color: inherit;\r\n}\r\n\r\n.italics:placeholder-shown {\r\n  font-style: italic;\r\n  font-size: 20px;\r\n}\r\n\r\n.strike {\r\n  text-decoration: line-through;\r\n}\r\n\r\n/* clear */\r\n.clear {\r\n  padding: 1rem;\r\n  align-items: center;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  background-color: #f4f4f4;\r\n}\r\n\r\n.clear a {\r\n  color: #666;\r\n  text-decoration: none;\r\n}\r\n\r\n.clear a:hover {\r\n  text-decoration: underline;\r\n}\r\n"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e=n(r);return r[2]?"@media ".concat(r[2]," {").concat(e,"}"):e})).join("")},r.i=function(n,e,t){"string"==typeof n&&(n=[[null,n,""]]);var o={};if(t)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var A=0;A<n.length;A++){var c=[].concat(n[A]);t&&o[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),r.push(c))}},r}},15:n=>{function r(n,r){(null==r||r>n.length)&&(r=n.length);for(var e=0,t=new Array(r);e<r;e++)t[e]=n[e];return t}n.exports=function(n){var e,t,o=(t=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,r){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var t,o,a=[],i=!0,A=!1;try{for(e=e.call(n);!(i=(t=e.next()).done)&&(a.push(t.value),!r||a.length!==r);i=!0);}catch(n){A=!0,o=n}finally{try{i||null==e.return||e.return()}finally{if(A)throw o}}return a}}(e,t)||function(n,e){if(n){if("string"==typeof n)return r(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?r(n,e):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var A=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(A),d="/*# ".concat(c," */"),l=i.sources.map((function(n){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(n," */")}));return[a].concat(l).concat([d]).join("\n")}return[a].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],A=0;A<n.length;A++){var c=n[A],d=t.base?c[0]+t.base:c[0],l=a[d]||0,s="".concat(d," ").concat(l);a[d]=l+1;var u=e(s),p={css:c[1],media:c[2],sourceMap:c[3]};-1!==u?(r[u].references++,r[u].updater(p)):r.push({identifier:s,updater:o(p,t),references:1}),i.push(s)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=e(a[i]);r[A].references--}for(var c=t(n,o),d=0;d<a.length;d++){var l=e(a[d]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=c}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t=e.css,o=e.media,a=e.sourceMap;o?n.setAttribute("media",o):n.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r);var t={};(()=>{e.d(t,{Z:()=>v});var n=e(379),r=e.n(n),o=e(795),a=e.n(o),i=e(569),A=e.n(i),c=e(565),d=e.n(c),l=e(216),s=e.n(l),u=e(589),p=e.n(u),f=e(443),m={};m.styleTagTransform=p(),m.setAttributes=d(),m.insert=A().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=s(),r()(f.Z,m),f.Z&&f.Z.locals&&f.Z.locals;const E=n=>{localStorage.setItem("todo-list",JSON.stringify(n))},h=n=>{const r=JSON.parse(localStorage.getItem("todo-list")),e=r.filter((e=>r.indexOf(e)!==n));for(let n=0;n<=e.length-1;n++)e[n].index=e.indexOf(e[n])+1;E(e),window.location.reload()},C=document.querySelector(".container"),g=document.querySelector(".italics"),B=document.querySelector(".add"),b=document.querySelector(".clear-all"),y=()=>{for(;C.lastChild;)C.removeChild(C.lastChild);const n=JSON.parse(localStorage.getItem("todo-list"));if(null!=n)for(let r=0;r<=n.length-1;r++){const e=document.createElement("div");e.id=n[r].index,e.classList.add("list");const t=document.createElement("input");t.type="checkbox",t.classList.add("check");const o=document.createElement("label");o.classList.add("label"),o.textContent=`${n[r].description}`,o.contentEditable=!0,n[r].completed&&(t.checked=!0,o.classList.add("strike"));const a=document.createElement("span");a.innerHTML="<i class='fas fa-ellipsis-v'></i>";const i=document.createElement("span");i.innerHTML="<i class='fas fa-trash-alt'></i>",i.style.display="none",i.style.cursor="pointer",i.id=n.indexOf(n[r]),e.appendChild(t),e.appendChild(o),e.appendChild(a),e.appendChild(i),C.appendChild(e),o.addEventListener("focus",(()=>{a.style.display="none",i.style.display="flex",o.classList.remove("strike"),i.addEventListener("mousedown",(n=>{n.preventDefault(),h(parseInt(i.id))}))})),o.addEventListener("blur",(e=>{var t,o,A;a.style.display="none",i.style.display="flex",t=e.target,o=n,A=n[r],o[A.index-1].description=t.textContent,E(o),v()})),t.addEventListener("change",(e=>{var t,a,i;t=e.target,a=n[r],i=o,t.checked?(i.classList.add("strike"),a.completed=!0):(i.classList.remove("strike"),a.completed=!1),E(n)}))}};B.addEventListener("click",(()=>{(n=>{let r=JSON.parse(localStorage.getItem("todo-list"));""===n.value?n.focus():null!=r?(r.push({description:n.value,completed:!1,index:r.length+1}),E(r)):(r=[],r.push({description:n.value,completed:!1,index:1}),E(r)),n.value="",n.focus(),v()})(g)})),b.addEventListener("click",(()=>{(()=>{const n=JSON.parse(localStorage.getItem("todo-list")).filter((n=>!1===n.completed));let r=1;for(let e of n)e.index=r++;E(n),v()})()})),window.addEventListener("load",(()=>{JSON.parse(localStorage.getItem("todo-list")),y()}));const v=y})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,